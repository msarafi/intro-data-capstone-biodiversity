“Completed Code in the Learning Environment”


mport codecademylib
import pandas as pd
from matplotlib import pyplot as plt




#Step 1/15
# Loading species_info.csv
species = pd.read_csv('species_info.csv')
# Print species.head() and inspecting the DataFrama
print species.head()



#Step 2/15
#Finding how many different species are in the DataFrame
species_count = species.scientific_name.nunique()
print species_count


#Finding how many different categories are in the DataFrame
species_type = species.category.unique()
print species_type
#Finding the different values of conservation_status
conservation_statuses = species.conservation_status.unique()
print conservation_statuses





#Step 3/15
conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts



#Step 4/15
#replace NaN in the DataFrame with 'No Intervention'
species.fillna('No Intervention', inplace = True)
conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts


#Step 5/15
#Creating a new DataFrame called protection_counts
protection_counts = species.groupby('conservation_status')\
        .scientific_name.nunique().reset_index()\
        .sort_values(by='scientific_name')


#Creating a bar chart    
plt.figure(figsize=(10, 4))
ax = plt.subplot()
plt.bar(range(len(protection_counts)),protection_counts.scientific_name.values)
ax.set_xticks(range(len(protection_counts)))
ax.set_xticklabels(protection_counts.conservation_status.values)
plt.ylabel('Number of Species')
plt.title('Conservation Status by Species')
labels = [e.get_text() for e in ax.get_xticklabels()]
plt.show()



#Step 6/15
#Creating a new column
species['is_protected'] = species.conservation_status != 'No Intervention'


#Group by both category and is_protected
category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()
print category_counts.head()


#Pivoting data
category_pivot = category_counts.pivot(columns='is_protected',
                          index='category',
                          values='scientific_name')\
                          .reset_index()
print category_pivot




#Step 7/15
#Renaming the columns
category_pivot.columns = ['category','not_protected','protected']
print category_pivot
#Creating the column percent_protected
category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)


print category_pivot






#Step 8/15
#Creating the contingency table
contingency = [[146, 30],
[413, 75]]
#Performing the chi-squared test
chi2, pval, dof, expected = chi2_contingency(contingency)
print(pval)


#Performing the chi-squared test for reptiles and mammals
contingency2 = [[73, 5],
[146, 30]]


chi2, pval_reptile_mammal, dof, expected = chi2_contingency(contingency2)
print(pval_reptile_mammal)


#Step 10/15
#Loading and inspecting 'observations.csv'
observations = pd.read_csv('observations.csv')
print observations.head()



#Step 11/15
#Creating column 'is_sheep'
species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)


#Creating the variable 'species_is_sheep'
species_is_sheep = species[species.is_sheep]
print species_is_sheep


#Creating the variable 'sheep_species'
sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]
print sheep_species



#Step 12/15
#Merging Sheep and Observation DataFrames
sheep_observations = observations.merge(sheep_species)
print sheep_observations.head()
#Finding the observations for each park
obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()
print obs_by_park


#Step 13/15
#Plotting sheep sightings
plt.figure(figsize=(16, 4))
ax = plt.subplot()
plt.bar(range(len(obs_by_park)),
            obs_by_park.observations.values)
ax.set_xticks(range(len(obs_by_park)))
ax.set_xticklabels(obs_by_park.park_name.values)
plt.ylabel('Number of Observations')
plt.title('Observations of Sheep per Week')
plt.show()


#Step 14/15
#Foot and Mouth Reduction Effort - Sample Size Determination


baseline = 15
minimum_detectable_effect = 100*5/15
print(minimum_detectable_effect)


sample_size_per_variant = 870


yellowstone_weeks_observing = sample_size_per_variant/507
print yellowstone_weeks_observing
bryce_weeks_observing = sample_size_per_variant/250
print bryce_weeks_observing